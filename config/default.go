package config

//go:generate stringer -type CipherSuit
//CipherSuit cipher suit
type CipherSuit uint16

//cipher suit enum
//nolint
const (
	TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256       CipherSuit = 0xc02b
	TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384         CipherSuit = 0xc030
	TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384       CipherSuit = 0xc02c
	TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256   CipherSuit = 0xcca8
	TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 CipherSuit = 0xcca9
	TLS_AES_128_GCM_SHA256                        CipherSuit = 0x1301
	TLS_AES_256_GCM_SHA384                        CipherSuit = 0x1302
	TLS_CHACHA20_POLY1305_SHA256                  CipherSuit = 0x1303
)

//nolint
var parseCipherSuit = map[string]CipherSuit{
	TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384.String():         TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
	TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384.String():       TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
	TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256.String():       TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
	TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256.String():   TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
	TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256.String(): TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,
	TLS_AES_128_GCM_SHA256.String():                        TLS_AES_128_GCM_SHA256,
	TLS_AES_256_GCM_SHA384.String():                        TLS_AES_256_GCM_SHA384,
	TLS_CHACHA20_POLY1305_SHA256.String():                  TLS_CHACHA20_POLY1305_SHA256,
}
